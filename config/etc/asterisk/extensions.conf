[general]
static=yes
writeprotect=yes
clearglobalvars=no

[globals]
TRUNK=DAHDI/G2                                  ; Trunk interface
TRUNKMSD=1                                      ; MSD digits to strip (usually 1 or 0)

;//////////////////////////////////////////////////////////////////
;///////////////   ACE Direct Dial Plan    ///////////////////////
;////////////////////////////////////////////////////////////////

[handler]
exten => addheader,1,Set(PJSIP_HEADER(add,Call-Info)=<sip:${agent_ip}> , purpose=trs-user-ip) ;Adds SIP header for RUE Compliance
exten => addheader,n,Return()  ;exit subroutine
exten => addheader,n,HangUp()  ;if Return fails, hangup the call

[from-internal]

;Direct-to-queue extension for General Questions, can be used to place a caller directly into a queue from the front-end web application
exten => _575781,1,Answer()
                same => n,DumpChan()
                same => n,Verbose(2,${CALLERID(num)} entering the general questions queue from WebRTC Consumer Portal)
                same => n,Set(qinfo=${QUEUE_VARIABLES(GeneralQuestionsQueue)}) ; get the QUEUE information. returns 0 if successful
                same => n,Set(CALLERID(num)=${CALLERID(num):0:40}) ; to cover for a bug that only allowed for 40 bytes
                same => n,Set(CALLERID(name)=${CALLERID(name):0:40})
                same => n,Set(ACTUALTO=pjsip:${CALLERID(num)})
                same => n,Set(ACTUALFROM=${EXTEN})
                same => n,Macro(sendIM,"You are in the General Questions Queue. There are $[${QUEUECALLS}] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})
                same => n,Queue(GeneralQuestionsQueue)
                same => n,HangUp()

;Direct-to-queue extension for VideoMail Queue, can be used to place a caller directly into a queue from the front-end web application
exten => _575795,1,Answer()
                same => n,DumpChan()
                same => n,Verbose(2,${CALLERID(num)} entering the general questions queue from WebRTC Consumer Portal)
                same => n,Set(qinfo=${QUEUE_VARIABLES(GeneralQuestionsQueue)}) ; get the QUEUE information. returns 0 if successful
                same => n,Set(CALLERID(num)=${CALLERID(num):0:40}) ; to cover for a bug that only allowed for 40 bytes
                same => n,Set(CALLERID(name)=${CALLERID(name):0:40})
                same => n,Set(ACTUALTO=pjsip:${CALLERID(num)})
                same => n,Set(ACTUALFROM=${EXTEN})
                same => n,Macro(sendIM,"You are in the Videomail Queue. There are $[${QUEUECALLS}] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})
                ;same => n,Queue(MailQueue)
                same => n,Goto(Videomail,start,1)
                same => n,HangUp()

;Direct-to-queue extension for Complaints Queue, can be used to place a caller directly into a queue from the front-end web application
exten => _575791,1,Answer()
                same => n,DumpChan()
                same => n,Verbose(2,${CALLERID(num)} entering the general questions queue from WebRTC Consumer Portal)
                same => n,Set(qinfo=${QUEUE_VARIABLES(ComplaintsQueue)}) ; get the QUEUE information. returns 0 if successful
                same => n,Set(CALLERID(num)=${CALLERID(num):0:40}) ; to cover for a bug that only allowed for 40 bytes
                same => n,Set(CALLERID(name)=${CALLERID(name):0:40})
                same => n,Set(ACTUALTO=pjsip:${CALLERID(num)})
                same => n,Set(ACTUALFROM=${EXTEN})
                same => n,Macro(sendIM,"You are in the Complaints Queue. There are $[${QUEUECALLS}] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})
                same => n,Queue(ComplaintsQueue)
                same => n,HangUp()

;************************************
; Extensions
;************************************

;Outbound dialing
exten => _XXXXXXXXXX,1,NoOp("Caller ID: ${CALLERID(number)}")
                                same => n,Set(CALLERID(all)="ACE Direct" <${DB(GLOBAL/DIALIN)}>)
                                same => n,Verbose(2,The origin video codecs being sent outbound are ${PJSIP_MEDIA_OFFER(video)})
                                same => n,Verbose(2,The origin audio codecs being sent outbound are ${PJSIP_MEDIA_OFFER(audio)})
                                same => n,AGI(itrslookup.sh,${EXTEN},"simple")
                                same => n,NoOp("number: ${EXTEN} has iTRS sipuri: ${sipuri}")
                        ;If a blank URI this is a hearing user, direct to Twilio
                                same => n,GotoIf($["${sipuri}" = "" ]?from-phones,${EXTEN},1)
		                same => n,Verbose(2,"Number is unable to be dialed as-is, hanging up")
				same => n,SoftHangup(${CHANNEL(pjsip,remote_addr)})
                                same => n,HangUp()
                        ;else do a direct dial
                        ;!!!!!! This is an example of calling an AGI script. This AGI script polls a remote database of 10 digits numbers for the SIP uri information in order to dial outbound. To make this part functional, you will need to have an established account and connection with iTRS or other database registry of 10 digit numbers to connect to. Once connected, you must query that database for the sip URI and reuturn that information in the DIAL application as the below example demonstrates.       
				;same => n,AGI(itrslookup.sh,${EXTEN},"full")
                                ;same => n,NoOp("number: ${EXTEN} has SVR record uri: ${uri}")
                                ;same => n,Set(agent_addr=${CHANNEL(pjsip,remote_addr)})
                                ;same => n,Set(_agent_ip=${CUT(agent_addr,:,1)})
                                ;same => n,Set(JITTERBUFFER(fixed)=(4200,,60) ;Jitter Buffer 500ms max size, no limit, 60ms extra
                                ;same => n,Dial(PJSIP/Provider${endpoint}/sip:+1${EXTEN}@${uri},180,b(handler^addheader^1))
                                ;same => n,SoftHangup(${CHANNEL(pjsip,remote_addr)})
                                ;same => n,HangUp()


;NOTE: Use the below code to facilitate DIRECT dialing from agent:agent, only if and when it is necessary to do so.
	;same => n,Dial(PJSIP/${EXTEN},,b(from-internal^set_video_codec_outbound^1(${PJSIP_MEDIA_OFFER(video)})))

;Agents
exten => _30XXX,1,Answer()
                 same => n,Dial(PJSIP/${EXTEN},30,t)
                 same => n,DumpChan()
                 same => n,HangUp()

exten => _33XXX,1,Answer()
                 same => n,Dial(PJSIP/${EXTEN},30,t)
                 same => n,DumpChan()
                 same => n,HangUp()

;Reserved
;exten => _40XX,1,Answer()
;                same => n,DumpChan()
;                same => n,Dial(PJSIP/${EXTEN},30,t)
;                same => n,HangUp()

;Reserved
;exten => _50XX,1,Answer()
;                same => n,DumpChan()
;                same => n,Dial(PJSIP/${EXTEN},30,t)
;                same => n,HangUp()

;Reserved
;exten => _60XXX,1,Answer()
;                 same => n,DumpChan()
;                 same => n,Dial(PJSIP/${EXTEN},30,t)
;                 same => n,HangUp()

;Reserved
;exten => _70XXX,1,Answer()
;                 same => n,DumpChan()
;                 same => n,Dial(PJSIP/${EXTEN},30,t)
;                 same => n,HangUp()

;Videomail Answering Agent/Bot
exten => _800XX,1,Answer()
                 same => n,DumpChan()
                 same => n,Dial(PJSIP/${EXTEN},30,t)
                 same => n,HangUp()

;WebRTC Consumer Numbers
exten => _900XX,1,Answer()
                 same => n,DumpChan()
                 same => n,Dial(PJSIP/${EXTEN},30,t)
                 same => n,HangUp()

;Send caller to hangup context to end call
exten => hangup,1,Goto(hangup-cause,hangup,1)
        same => n,Verbose(2,"Caller not transferred successfully, returning to last known position in dialplan.")
        same => n,return()



[from-providers]

;Handle inbound VRS calls from provider phones. Some provider phones will send unique prefixes with the numbers. This block of number sequences will handle those.
exten => _${DB(GLOBAL/DIALIN)},1,GoTo(from-providers,${DB(GLOBAL/DIALIN)},1)
exten => +1${DB(GLOBAL/DIALIN)},1,GoTo(from-providers,${DB(GLOBAL/DIALIN)},1)
exten => _1${DB(GLOBAL/DIALIN)},1,Goto(from-providers,${DB(GLOBAL/DIALIN)},1)
exten => _X${DB(GLOBAL/DIALIN)},1,Goto(from-providers,${DB(GLOBAL/DIALIN)},1)
exten => _XX${DB(GLOBAL/DIALIN)},1,Goto(from-providers,${DB(GLOBAL/DIALIN)},1)
exten => _[+].X${DB(GLOBAL/DIALIN)},1,Goto(from-providers,${DB(GLOBAL/DIALIN)},1)
exten => _?X${DB(GLOBAL/DIALIN)},1,Goto(from-providers,${DB(GLOBAL/DIALIN)},1)


; Call Blocking Feature
exten => ${DB(GLOBAL/DIALIN)},1,Set(CALLERID(num)=${CALLERID(num):0:40})
        ; Stripping everything such as + and/or 1 from the start of caller id string
        same => n,Set(CALLERID(num)=${CALLERID(num):-10})
        ; If double quotes are not used around the DB variable, things work but asterisk logs an err about bad syntax.
        same => n,GotoIf($[ "${DB(blockcaller/1${CALLERID(num)})}" = "1" ]?blocked:NotBlocked)
        ; Added sending a congestion message back to the caller because some providers have trouble handling
        ; hangup below without any messaging. "2" is wait to get a hangup from the other end.
        ; AJ 10/14/2020

        same => n(blocked),NoOp("Sending Congestion message")
        ; Congestion message sends a "Service Unavailable 503 to the caller"
        same => n,Congestion(2)

        ; NOTE: Control will get below if far end does NOT respond properly, then we will have to hangup
        ; Hangup message sends a "decline 603 message to caller" Provider phones don't handle this very well
        same => n,NoOp("Sent Congestion message")
        same => n,Hangup()

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;          ********** Call Center Hours of Operation **********
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Logic:
;       If BUSINESS_HOURS/ACTIVE==2, call center is closed for all hours/days, go to CallCenterClosed extension
;       If BUSINESS_HOURS/ACTIVE==0, business hours check is enforced, go to AfterHoursCheck
;       If BUSINESS_HOURS/ACTIVE==1, call center is open for all hours/days, go to from-providers_caller_query
exten => ${DB(GLOBAL/DIALIN)},n(NotBlocked),GotoIf($["${DB(BUSINESS_HOURS/ACTIVE)}" != "2"]?AfterHoursActive:CallCenterClosed)
        same => n(AfterHoursActive),GotoIf($["${DB(BUSINESS_HOURS/ACTIVE)}" = "0"]?AfterHoursCheck:from-providers_caller_query,start,2)
        same => n(AfterHoursCheck),GotoIfTime(${DB(BUSINESS_HOURS/START)}-${DB(BUSINESS_HOURS/END)},mon-sun,*,*?CallCenterOpen:CallCenterClosed)
        same => n(CallCenterOpen),Answer()
                same => n,DumpChan() ;dumps all available vars for the given channel
                same => n,NoOp("Caller ID is: ${CALLERID(number)}")  ;informational
                same => n,NoOp("..and Call Center is OPEN!")
                same => n,Goto(from-providers_caller_query,start,1)

        same => n(CallCenterClosed),Answer()
                same => n, DumpChan()
                same => n,NoOp("Caller ID is: ${CALLERID(number)}")
                same => n,NoOp("..and Call Center is CLOSED!")
                same => n,Goto(call_center_closed_caller_query,start,1)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;          ********** I V R for PROVIDER NUMBERS **********
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; IVR and determination for proper Voice Q
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;::::::::::THE DTMF MENU::::::::::::::::::
;The following syntax defines the DTMF menu users will see when dialing in from a video phone. Currently, options 4, and 5, are configured to route to the queues while option 9 will route to the videomail queue. A caller will also be routed to the videomail queue if a selection is not made within the alloted time in seconds.
[from-providers_caller_query]

exten => start,1,Verbose(2,Caller is entering the IVVR DTMF Menu)
        same => n,Answer()
        same => n,Verbose(2,Setting caller queue position bonus to ${Position})
        same => n,Set(JITTERBUFFER(adaptive)=default)
	same => n,Playback(wakeup) ;send a small video file to start video rtp flow
	same => n,WaitExten(2)	;give a little time for rtp and ICE to complete and allow receipt of dtmf
	same => n,Wait(2)	;give a little more time for rtp and ICE to complete
	same => n,Playback(base_queue) ;playback DTM menu
        ;here we will wait for a caller to select a dtmf option for 15 seconds.
		same => n,WaitExten(15)
		;You may use the Playback application to play an asterisk recorded video menu file back to the caller i.e " same => n,Playback(filename) "
		same => n,Verbose(2,"No selection made by caller, hanging up)
		same => n,Goto(hangup-cause,hangup,1)

                ; HANDLE THE DTMF CODES AS AN EXTENSION
                exten => 0,1,Playback(number_0-recording0)
                exten => 0,n,Goto(i,1)

                exten => 1,1,Playback(1)
		exten => 1,n,Goto(General_Questions,start,1)

                exten => 2,1,Playback(2)
                exten => 2,n,Goto(Complaints,start,1)

                exten => 3,1,Playback(3)
                exten => 3,n,Goto(i,1)

                exten => 4,1,Playback(4)
                exten => 4,n,Goto(General_Questions,start,1)

                exten => 5,1,Playback(5)
                exten => 5,n,Goto(i,1)

                exten => 6,1,Playback(6)
                exten => 6,n,Goto(i,1)

                exten => 7,1,Playback(7)
                exten => 7,n,Goto(i,1)

                exten => 8,1,Playback(8)
                exten => 8,n,Goto(i,1)

                exten => 9,1,Verbose(2,"User selected Video Mail")
                exten => 9,n,Playback(9)
		exten => 9,n,Goto(Videomail,start,1)

                exten => 10,1,Verbose(2,Going to VideoMail)
		;You may use the Playback application to play an asterisk recorded video file back to the caller i.e " same => n,Playback(filename) "
                exten => 10,n,Goto(Videomail,start,1)

                exten => *,1,Playback(number_star-recording1)
                exten => *,n,Goto(bye,1)

                exten => i,1,Playback(pbx-invalid)
                exten => i,n,Goto(start,21)

                exten => t,1,Playback(GoodBye-recording0)
                exten => t,n,Hangup()

                ; Goodbye
                exten => bye,1,Playback(GoodBye-recording0)
                exten => bye,n,Hangup()


[call_center_closed_caller_query]
;The purpose of this context is to allow users in the complaints or general questions queue to leave their respective queue and switch to the mail queue to leave a video mail. Users can send the "1" DTMF tone to switch to the mail queue. In order to enable this functionality, we must specify this to be the context of the complaints and general questions queues in queues.conf, and add the 'T' option to the Queue() functions of the aforementioned queues for both WebRTC and VRS/Provider calls.

exten => start,1,Verbose(2,${CALLERID(number)} entering the query from your provider for proper queue placement.)
                same => n,Wait(2)
                same => n,Playback(base_closed) ;play back a video using Playback
                same => n,WaitExten(20)
		same => n,Verbose(2,"No selection made by caller, sending to Hangup")
                same => n,Hangup()

        ; HANDLE THE DTMF CODES AS AN EXTENSION
                exten => 9,1,Playback(9)
                exten => 9,n,Goto(Videomail,start,1)

                exten => i,1,Playback(pbx-invalid)
                exten => i,n,Goto(start,1)

        ; Goodbye
                exten => bye,1,Playback(GoodBye-recording0)
                exten => bye,n,Hangup()


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;          ********** General Questions Queue **********
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[General_Questions]

exten => start,1,Answer() ;pick up the channel
                same => n,Verbose(2,${CALLERID(num)} entering the general questions queue from WebRTC Consumer Portal)
                same => n,Set(JITTERBUFFER(adaptive)=default)
                same => n,WaitExten(1)
                same => n,Set(qinfo=${QUEUE_VARIABLES(GeneralQuestionsQueue)}) ; get the QUEUE information. returns 0 if successful
                same => n,Set(CALLERID(num)=${CALLERID(num):0:40}) ; to cover for a bug that only allowed for 40 bytes
                same => n,Set(CALLERID(name)=${CALLERID(name):0:40})
                same => n,Set(ACTUALTO=pjsip:${CALLERID(num)})
                same => n,Set(ACTUALFROM=${EXTEN})
                same => n,Macro(sendIM,"You are in the General Questions Queue. There are $[${QUEUECALLS}] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})
                same => n,Set(CHANNEL(musicclass)=videoqueue) ;set the music on hold to playback video instead of audio (requires patch)
                same => n,Queue(GeneralQuestionsQueue,chHtT,,,3660) ;place caller in queue 
		same => n,Verbose(2, "Caller has exited the queue, sending to hangup")
                same => n,Goto(hangup-cause,hangup,1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;DTMF options while in the Questions Queue
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
exten => 1,1,Verbose(2,"User pushed 1, going back to IVVR")
exten => 1,n,Goto(General_Questions,start,1)

exten => 9,1,Playback(9) ;announce the number 9 back to caller to assure dtmf has been pressed
exten => 9,n,Verbose(2,"User selected Video Mail")
exten => 9,n,Goto(Videomail,start,1)

exten => hangup,1,Goto(hangup-cause,hangup,1)
        same => n,Verbose(2,"Caller not transferred successfully, returning to last known position in dialplan.")
        same => n,Hangup()

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;          ********** Complaints Queue **********
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[Complaints]
exten => start,1,Answer() ;pick up the channel
                same => n,Verbose(2,${CALLERID(num)} entering the general questions queue from WebRTC Consumer Portal)
                same => n,Set(JITTERBUFFER(adaptive)=default)
                same => n,WaitExten(1)
                same => n,Set(qinfo=${QUEUE_VARIABLES(GeneralQuestionsQueue)}) ; get the QUEUE information. returns 0 if successful
                same => n,Set(CALLERID(num)=${CALLERID(num):0:40}) ; to cover for a bug that only allowed for 40 bytes
                same => n,Set(CALLERID(name)=${CALLERID(name):0:40})
                same => n,Set(ACTUALTO=pjsip:${CALLERID(num)})
                same => n,Set(ACTUALFROM=${EXTEN})
                same => n,Macro(sendIM,"You are in the Complaints Queue. There are $[${QUEUECALLS}] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})
                same => n,Set(CHANNEL(musicclass)=videoqueue) ;set the music on hold to playback video instead of audio (requires patch)
                same => n,Queue(ComplaintsQueue,chHtT,,,3660) ;place caller in queue 
		same => n,Verbose(2, "Caller has exited the queue, sending to hangup")
                same => n,Goto(hangup-cause,hangup,1)
				
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;DTMF options while in the Complaints Queue
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
exten => 1,1,Verbose(2,"User pushed 1, going back to IVVR")
exten => 1,n,Goto(General_Questions,start,1)

exten => 9,1,Verbose(2,"User selected Video Mail")
exten => 9,n,Goto(Videomail,start,1)

exten => hangup,1,Goto(hangup-cause,hangup,1)
        same => n,Verbose(2,"Caller not transferred successfully, returning to last known position in dialplan.")
        same => n,Hangup()

[sendIM-gosub]
;ARG1 -message to send
;ARG2 -SIP recipient
;ARG3 -SIP sender
exten => s,1,Set(MESSAGE(body)=${ARG1})
same => n,Set(${ARG2}="You are in the Complaints Queue. There are $[${QUEUECALLS}] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})
same => n,MessageSend(${ACTUALTO},${ACTUALFROM},${ARG2})
same => n,Return()

[Goodbye-video]
exten => bye,1,Playback(quiet_1sec)
          same => n,Playback(GoodBye-recording0)
          same => n,Hangup()

[macro-sendIM]
;ARG1 -message to send
;ARG2 -SIP recipient
;ARG3 -SIP sender
exten => s,1,Set(MESSAGE(body)=${ARG1})
        same => n,MessageSend(${ACTUALTO},${ACTUALFROM})

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;          ********** Videomail Queue **********
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[Videomail]

exten => start,1,Answer() ;pick up the channel
                same => n,DumpChan()
                same => n,Set(JITTERBUFFER(adaptive)=default) ;smooth out videomail playback/recording by adding a jitterbuffer
                same => n,Verbose(2,${CALLERID(num)} Caller ID entering the Video Mail Queue)
                same => n,Set(qinfo=${QUEUE_VARIABLES(MailQueue)}) ; get the QUEUE information. returns 0 f successful
                same => n,Set(CALLERID(num)=${CALLERID(num):0:40}) ; to cover for a bug that only allowed for 40 bytes
                same => n,Set(CALLERID(name)=${CALLERID(name):0:40})
                same => n,Set(ACTUALTO=pjsip:${CALLERID(num)})
                same => n,Set(ACTUALFROM=${EXTEN})
                same => n,Macro(sendIM,"You are in the Videomail Queue. There are $[${QUEUECALLS}] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})
                same => n,Progress()
                same => n,Playback(silence/1)
                ;this block is will result in the 'unavailable' video being played for 20-25s'
                ;same => n,Set(TIMEOUT(response)=20)
                same => n,WaitExten(1)
		same => n(mail),Queue(MailQueue,chHtT,,,30) ;if no registered videomail agents caller waits 30seconds, hangs up.
                same => n,Verbose(2,"In Video calling goodbyevideo")
                same => n,Hangup()
                same => n,SoftHangup(${CHANNEL(pjsip,remote_addr)})

        exten => #,1,Playback(base_goodbye) ;playback an asterisk recorded video to the caller
                same => n,Hangup()

        exten => 9,1,Verbose(2,"User selected Video Mail")
        exten => 9,n,Goto(Videomail,start,mail)

        exten => hangup,1,Goto(hangup-cause,hangup,1)
                same => n,Verbose(2,"Caller not transferred successfully, returning to last known position in dialplan.")
                same => n,return()

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;          ********** PSTN Call Handler for Twilio **********
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[from-twilio]
exten => _+1NXXXXXXXXX,1,Answer()
                                same => n,Goto(from-providers,_${DB(GLOBAL/DIALIN)},1)
                                same => n,DumpChan()

; For outbound PSTN calling
[from-phones]
exten => _NXXNXXXXXX,1,Set(CALLERID(all)="Your Application Name" <${DB(GLOBAL/DIALIN)}>)
                                same => n,DumpChan()
                                same => n,Verbose(2,"iTRS Lookup Script has FAILED. This message is printed instead of attempting to dial a PSTN number through Twilio. See line 426 in extensions.conf to change this behavior.")
                                same => n,Hangup()
                                ;same => n,Dial(PJSIP/+1${EXTEN}@twilio0)

; This context allows for internal SIP text messages to be sent from endpoint to endpoint, or from server to endpoint. This can be useful for sending server messages to all registered endpoints such as Alerts, Warnings, or other information.

[hangup-cause]
exten => hangup,1,Verbose(2,"Agent attempting to hang up callers channel gracefully")
exten => hangup,2,Playback(base_goodbye)
exten => hangup,3,Hangup()
exten => hangup,4,Verbose(2,"Hangup unsuccessful, returning caller to last known position in dialplan")
exten => hangup,5,Return()


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;********** Ineternal SIP Text Messaging Engine********** !!!!!!!
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[internal-im]
exten => _X.,1,NoOp(Messaging dialplan invoked)
exten => _X.,n,NoOp(To ${MESSAGE(to)})
exten => _X.,n,NoOp(From ${MESSAGE(from)})
exten => _X.,n,NoOp(Body ${MESSAGE(body)})
exten => _X.,n,Set(ACTUALTO=${CUT(MESSAGE(to),@,1)})

exten => _X.,n,MessageSend(${ACTUALTO},${MESSAGE(from)})
exten => _X.,n,NoOp(Send status is ${MESSAGE_SEND_STATUS})
exten => _X.,n,GotoIf($["${MESSAGE_SEND_STATUS}" != "SUCCESS"]?sendfailedmsg)
exten => _X.,n,Hangup()

; Handle failed messaging
exten => _X.,n(sendfailedmsg),NoOp(Sending error to user)
exten => _X.,n,Set(SRC=${MESSAGE(from)})
exten => _X.,n,Set(DST=${MESSAGE(to)})
exten => _X.,n,Set(MSG=${MESSAGE(body)})
exten => _X.,n,Set(MESSAGE(body)="[${STRFTIME(${EPOCH},,%d%m%Y-%H:%M:%S)}] Your message to ${EXTEN} has failed. Sending when available")
exten => _X.,n,Set(ME_1=${CUT(MESSAGE(from),<,2)})
exten => _X.,n,Set(ACTUALFROM=${CUT(ME_1,@,1)})
exten => _X.,n,MessageSend(${ACTUALFROM},ServiceCenter)
exten => _X.,n,GotoIf($["${INQUEUE}" != "1"]?startq)
exten => _X.,n,Hangup()

exten => _X.,n(startq),NoOp(Queueing messaging for offline)
exten => _X.,n,Set(MSGTIME=${STRFTIME(${EPOCH},,%d%m%Y-%H:%M:%S)})
exten => _X.,n,SYSTEM(/var/lib/asterisk/agi-bin/astqueue.sh –SRC ‘${SRC}’ –DST ‘${DST}’ –MSG ‘${MSG}’)
exten => _X.,n,Hangup()[app-fakeanswer]
exten => _X.,n,Set(DESTDEV=${EXTEN})
exten => _X.,n,Set(THISDEVSTATE=${DEVICE_STATE(SIP/${DESTDEV})})
exten => _X.,n,GotoIf($["${THISDEVSTATE}" = "UNAVAILABLE"]?hang)
exten => _X.,n,GotoIf($["${THISDEVSTATE}" = "UNKNOWN"]?hang)
exten => _X.,n,Answer
exten => _X.,n,Hangup()
exten => _X.,n(hang),Hangup()

