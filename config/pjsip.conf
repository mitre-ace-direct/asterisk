;===============PJSIP.conf=============
;Global configuration parameters. Take great care in adding to global parameters and validate all changes made to assure they are not superceded by other options.
[global]
debug=yes
disallow=h263 
keep_alive_interval=15

;////////////////////////
;/// Transports ////////
;//////////////////////

;WebSecureSocket Transport Parameters
[transport-wss]
type=transport
protocol=wss
bind=0.0.0.0:443	;Binding IP and PORT designation for WSS
external_media_address=<public_ip>	;External Media IP to use
external_signaling_address=<public_ip>	;External SIP IP address to use
cert_file=<crt_file>	;Certificate file to use
priv_key_file=<crt_key>	;Private key file to use
allow_reload=yes	;Allows for dynamic reloading for transport

;WebSocket Transport Parameters
[transport-ws]
type=transport
protocol=ws
bind=0.0.0.0:8088	;Binding IP and PORT designation for WS
external_media_address=<public_ip>	;External Media IP to use
external_signaling_address=<public_ip>	;External SIP IP address to use
allow_reload=yes

;TCP Transport Parameters
[transport-tcp]
type=transport
protocol=tcp
bind=0.0.0.0
local_net=<local_ip>	;Internal IP binding
external_media_address=<public_ip>	;External Media IP to use
external_signaling_address=<public_ip>	;External SIP IP address to use
allow_reload=yes	;Allows for dynamic reloading for transport

;UDP Transport Parameters
;[transport-udp]
;type=transport
;protocol=udp   
;bind=0.0.0.0
;local_net=<local_ip>	;Internal IP binding
;external_media_address=<public_ip>	;External Media IP to use
;external_signaling_address=<public_ip>	;External SIP IP address to use
;allow_reload=yes	;Allows for dynamic reloading for transport

;TLS is not currently supported in our environment
;[transport-tls]
;type=transport
;protocol=tls
;bind=0.0.0.0:5061
;cert_file=/etc/asterisk/keys/asterisk.crt
;priv_key_file=/etc/asterisk/keys/asterisk.key
;ca_list_file=/etc/asterisk/keys/ca.crt
;method=sslv23


;///////////////////////
;//// Endpoints ///////
;/////////////////////
;This endpoint is designed to be used by SIP softphones
[endpoint-sipphone](!)
;transport=transport-tcp        ;transports are dynamically selected by PJSIP and should not be declared.
context=from-internal
disallow=all            ;This prevents wanton codecs from entering our environment
allow=ulaw              ;This is our preferred AUDIO codec
allow=h264              ;This is our preferred VIDEO codec (provider SIP soft phones prefer h264)
allow=vp8               ;This is our secondary VIDEO codec (WebRTC endpoints prefer vp8)
allow=t140              ;This allows Real Time Text
force_rport=yes         ;Forces the use of Reflexive Ports
direct_media=no         ;Disable direct media. REALLY disable it.
rewrite_contact=yes     ;Allow re-invites
media_address=<public_ip>    ;external media addressed used for SIP
rtp_symmetric=yes       ;Send RTP traffic back on the same port it received it
ice_support=yes         ;Allows STUN/ICE network tools to be used, mandatory.
use_avpf=no             ;PJSIP will use the AVPF or SAVPF RTP profile for all media offers on outbound calls and media updates will decline media offers not using the AVPF or SAVPF profile
force_avp=yes           ;PJSIP will use the AVP, AVPF, SAVP, or SAVPF RTP profile for all media offers on outbound calls and media updates including those for DTLS-SRTP streams
trust_id_inbound=yes    ;Trust information being sent
media_use_received_transport=yes        ;Communicate back on the same transport method that was received


;This endpoint profile is designed to be VP8 exclusive. This can be useful in cases where dynamic codec negotation fails and an endpoint works best with a single codec environment.
[endpoint-vp8](!)
;transport=transport-tcp        ;transports are dynamically selected by PJSIP and should not be declared.
context=from-internal
disallow=all            ;This prevents wanton codecs from entering our environment
allow=ulaw              ;This is our preferred AUDIO codec
allow=vp8              ;This is our preferred VIDEO codec (WebRTC endpoints prefer vp8)
allow=t140              ;This allows Real Time Text
force_rport=yes         ;Forces the use of Reflexive Ports
direct_media=no         ;Disable direct media. REALLY disable it.
rewrite_contact=yes     ;Allow re-invites
media_address=<public_ip>    ;external media addressed used for SIP
rtp_symmetric=yes       ;Send RTP traffic back on the same port it received it
ice_support=yes         ;Allows STUN/ICE network tools to be used, mandatory.
use_avpf=no             ;PJSIP will use the AVPF or SAVPF RTP profile for all media offers on outbound calls and media updates will decline media offers not using the AVPF or SAVPF profile
force_avp=yes           ;PJSIP will use the AVP, AVPF, SAVP, or SAVPF RTP profile for all media offers on outbound calls and media updates including those for DTLS-SRTP streams
trust_id_inbound=yes    ;Trust information being sent
media_use_received_transport=yes        ;Communicate back on the same transport method that was received


;This endpoint profile is designed to be H264 exclusive. This can be useful in cases where dynamic codec negotation fails and an endpoint works best with a single codec environment.
[endpoint-h264](!)
type=endpoint
;transport=transport-tcp	;transports are dynamically selected by PJSIP and should not be declared.
context=from-internal
disallow=all		;This prevents wanton codecs from entering our environment
allow=ulaw		;This is our preferred AUDIO codec
allow=h264              ;This is our preferred VIDEO codec (provider hard phones use h264)
allow=t140              ;This allows Real Time Text
force_rport=yes		;Forces the use of Reflexive Ports
direct_media=no		;Disable direct media. REALLY disable it.
rewrite_contact=yes	;Allow re-invites
media_address=<public_ip>	;external media addressed used for SIP
rtp_symmetric=yes	;Send RTP traffic back on the same port it received it
ice_support=yes		;Allows STUN/ICE network tools to be used, mandatory.
use_avpf=no		;PJSIP will use the AVPF or SAVPF RTP profile for all media offers on outbound calls and media updates will decline media offers not using the AVPF or SAVPF profile
force_avp=yes		;PJSIP will use the AVP, AVPF, SAVP, or SAVPF RTP profile for all media offers on outbound calls and media updates including those for DTLS-SRTP streams
trust_id_inbound=yes	;Trust information being sent
media_use_received_transport=yes	;Communicate back on the same transport method that was received

;This endpoint profile is designed to be used by all WebRTC related endpoints. This is used by the Agents logging in to the ACE Direct Agent portal as well as the Consumer Portal.
[endpoint-webrtc](!)
type=endpoint             ;This declares the explicit type of contact that will use this profile
transport=transport-wss   ;This transport is declared to assure web secure sockets are used.
context=from-internal
disallow=all            ;This prevents wanton codecs from entering our environment
disallow=h263           ;Some providers send h263 as a priority codec, we can't allow this codec to enter our environment.
allow=ulaw              ;This is our preferred AUDIO codec
allow=vp8		;This is our preferred VIDEO codec
allow=h264      	;This is our Secondary VIDEO codec (provider hard phones use h264)
allow=t140		;This allows Real Time Text
force_avp=yes		;PJSIP will use the AVP, AVPF, SAVP, or SAVPF RTP profile for all media offers on outbound calls and media updates including those for DTLS-SRTP streams
use_avpf=yes            ;PJSIP will use the AVPF or SAVPF RTP profile for all media offers on outbound calls and media updates will decline media offers not using the AVPF or SAVPF profile
media_encryption=dtls    ;PJSIP will offer DTLS-SRTP, required for SIP WebRTC endpoints
dtls_verify=fingerprint ;Verify that the provided peer certificate is valid
dtls_fingerprint=SHA-1	;This is the encryption method	
dtmf_mode=auto  	;Automatically select the DTMF mode to communicate with
dtls_rekey=0   		;Interval at which to renegotiate the TLS session and rekey
dtls_cert_file=/etc/asterisk/keys/asterisk.pem
dtls_ca_file=/etc/asterisk/keys/ca.crt
dtls_setup=actpass
ice_support=yes   	;This enables required STUN/ICE NAT tools for network traversal
media_use_received_transport=yes	;Communicate back on the same transport method that was received
rtp_symmetric=yes	;Send RTP traffic back on the same port it received it
force_rport=yes   	;Forces the use of Reflexive Ports
rewrite_contact=yes	;Allow re-invites
message_context=internal-im	;Extensions context to allow for SIP text messaging between endpoints
rtcp_mux=yes		;RTCP muxing is currently being used in Chrome and WebRTC
trust_id_inbound=yes	;Trust information being sent
bind_rtp_to_media_address=<public_ip>	;Use this address to facilitate outbound RTP traffic
rtp_keepalive=30		;send a keepalive to prevent disconnects due to 'silent line' detection.
send_pai=yes		; cjm-jan18 -- sends P-Asserted-Identity header
;qualify=yes		;Preiodically attempts to communicate with an endpoint to validate its status
user_eq_phone=yes	; cjm-jan18 -- adds "user=phone" tag to heades in SDP

;This endpoint profile is designed to be used for inbound provider phones.
[endpoint-providers](!)
type=endpoint			;This declares the explicit type of contact that will use this profile
transport=transport-tcp		;This transport is declared to facilitate outbound dialing over TCP instead of UDP.
context=from-providers	;Dial plan context in extensions.conf defining how provider phones will be routed.
disallow=all		;This prevents wanton codecs from entering our environment
disallow=h263		;Some providers send h263 as a priority codec, we can't allow this codec to enter our environment.
allow=ulaw		;This is our preferred AUDIO codec
allow=h264		;This is our preferred VIDEO codec
force_rport=yes  	;Forces the use of Reflexive Ports 
direct_media=no		;Disable direct media. REALLY disable it. 
rtp_symmetric=yes	;Send RTP traffic back on the same port it received it
ice_support=yes		;Allows STUN/ICE network tools to be used, mandatory.
;dtmf_mode=rfc4733	;DTMF declaration presumed to be needed though it interferes with provider SIP negotiations
trust_id_inbound=yes	;Trust information being sent
rewrite_contact=yes	;Allow re-invites
media_use_received_transport=yes	;Send information on the same transport method received
media_address=<public_ip>	;external media addressed used in the SIP headers
rtcp_mux=no 	;Providers are not yet using RTP MUXing.
;preferred_codec_only=yes	;Enable only if a single codec negotiation needs to be facilitated
disable_direct_media_on_nat=yes		;NAT environments typically can't facilitate direct media
direct_media_glare_mitigation=outgoing		;Prevent unnescessary and chatty sip conversations
rtp_keepalive=120		;send a keepalive to prevent disconnects due to 'silent line' detection.
100rel=yes
send_pai=yes			; cjm-jan18 -- sends P-Asserted-Identity header
from_domain=<hostname>		; cjm-jan18 -- modifies the From-URI to use this domain name
user_eq_phone=yes		; cjm-jan18 -- adds "user=phone" tag to heades in SDP

[endpoint-sorenson](!)
type=endpoint                   ;This declares the explicit type of contact that will use this profile
transport=transport-tcp         ;This transport is declared to facilitate outbound dialing over TCP instead of UDP.
context=from-providers  ;Dial plan context in extensions.conf defining how provider phones will be routed.
disallow=all            ;This prevents wanton codecs from entering our environment
disallow=h263           ;Some providers send h263 as a priority codec, we can't allow this codec to enter our environment.
allow=ulaw              ;This is our preferred AUDIO codec
allow=h264              ;This is our preferred VIDEO codec
force_rport=yes         ;Forces the use of Reflexive Ports
direct_media=no         ;Disable direct media. REALLY disable it.
rtp_symmetric=yes       ;Send RTP traffic back on the same port it received it
ice_support=yes         ;Allows STUN/ICE network tools to be used, mandatory.
dtmf_mode=auto_info		;was rfc4733, DTMF declaration of RFC4733 if other party supports it, otherwise SIP INFO 
trust_id_inbound=yes    ;Trust information being sent
rewrite_contact=yes     ;Allow re-invites
media_use_received_transport=yes        ;Send information on the same transport method received
media_address=<public_ip>    ;external media addressed used in the SIP headers
rtcp_mux=no     ;Providers are not yet using RTP MUXing.
;preferred_codec_only=yes       ;Enable only if a single codec negotiation needs to be facilitated
disable_direct_media_on_nat=yes         ;NAT environments typically can't facilitate direct media
direct_media_glare_mitigation=outgoing          ;Prevent unnescessary and chatty sip conversations
rtp_keepalive=120                ;send a keepalive to prevent disconnects due to 'silent line' detection.
100rel=yes
send_pai=yes                    ; cjm-jan18 -- sends P-Asserted-Identity header
from_domain=<hostname>              ; cjm-jan18 -- modifies the From-URI to use this domain name
user_eq_phone=yes               ; cjm-jan18 -- adds "user=phone" tag to heades in SDP
;asymmetric_rtp_codec=yes       ;allows this codec to be asymetrical when dialing webrtc endpoints
;connected_line_method=invite ;checks header for update, if not allowed, invites.


[endpoint-zvrs](!)
type=endpoint                   ;This declares the explicit type of contact that will use this profile
transport=transport-tcp         ;This transport is declared to facilitate outbound dialing over TCP instead of UDP.
context=from-providers  ;Dial plan context in extensions.conf defining how provider phones will be routed.
disallow=all            ;This prevents wanton codecs from entering our environment
disallow=h263           ;Some providers send h263 as a priority codec, we can't allow this codec to enter our environment.
allow=ulaw              ;This is our preferred AUDIO codec
allow=h264              ;This is our preferred VIDEO codec
force_rport=yes         ;Forces the use of Reflexive Ports
direct_media=no         ;Disable direct media. REALLY disable it.
rtp_symmetric=yes       ;Send RTP traffic back on the same port it received it
ice_support=yes         ;Allows STUN/ICE network tools to be used, mandatory.
;dtmf_mode=rfc4733      ;DTMF declaration presumed to be needed though it interferes with provider SIP negotiations
trust_id_inbound=yes    ;Trust information being sent
rewrite_contact=yes     ;Allow re-invites
media_use_received_transport=yes        ;Send information on the same transport method received
media_address=<public_ip>    ;external media addressed used in the SIP headers
rtcp_mux=no     ;Providers are not yet using RTP MUXing.
;preferred_codec_only=yes       ;Enable only if a single codec negotiation needs to be facilitated
disable_direct_media_on_nat=yes         ;NAT environments typically can't facilitate direct media
direct_media_glare_mitigation=outgoing          ;Prevent unnescessary and chatty sip conversations
rtp_keepalive=30                ;send a keepalive to prevent disconnects due to 'silent line' detection.
100rel=yes
send_pai=yes                    ; cjm-jan18 -- sends P-Asserted-Identity header
from_domain=<hostname>              ; cjm-jan18 -- modifies the From-URI to use this domain name
user_eq_phone=yes               ; cjm-jan18 -- adds "user=phone" tag to heades in SDP

[endpoint-purple](!)
type=endpoint                   ;This declares the explicit type of contact that will use this profile
transport=transport-tcp         ;This transport is declared to facilitate outbound dialing over TCP instead of UDP.
context=from-providers  ;Dial plan context in extensions.conf defining how provider phones will be routed.
disallow=all            ;This prevents wanton codecs from entering our environment
disallow=h263           ;Some providers send h263 as a priority codec, we can't allow this codec to enter our environment.
allow=ulaw              ;This is our preferred AUDIO codec
allow=h264              ;This is our preferred VIDEO codec
force_rport=yes         ;Forces the use of Reflexive Ports
direct_media=no         ;Disable direct media. REALLY disable it.
rtp_symmetric=yes       ;Send RTP traffic back on the same port it received it
ice_support=yes         ;Allows STUN/ICE network tools to be used, mandatory.
;dtmf_mode=rfc4733      ;DTMF declaration presumed to be needed though it interferes with provider SIP negotiations
trust_id_inbound=yes    ;Trust information being sent
rewrite_contact=no     ;Allow re-invites
media_use_received_transport=yes        ;Send information on the same transport method received
media_address=<public_ip>    ;external media addressed used in the SIP headers
rtcp_mux=no     ;Providers are not yet using RTP MUXing.
;preferred_codec_only=yes       ;Enable only if a single codec negotiation needs to be facilitated
disable_direct_media_on_nat=yes         ;NAT environments typically can't facilitate direct media
direct_media_glare_mitigation=outgoing          ;Prevent unnescessary and chatty sip conversations
rtp_keepalive=120                ;send a keepalive to prevent disconnects due to 'silent line' detection.
100rel=yes
send_pai=yes                    ; cjm-jan18 -- sends P-Asserted-Identity header
from_domain=<hostname>              ; cjm-jan18 -- modifies the From-URI to use this domain name
user_eq_phone=yes               ; cjm-jan18 -- adds "user=phone" tag to heades in SDP

[endpoint-convo](!)
type=endpoint                   ;This declares the explicit type of contact that will use this profile
transport=transport-tcp         ;This transport is declared to facilitate outbound dialing over TCP instead of UDP.
context=from-providers  ;Dial plan context in extensions.conf defining how provider phones will be routed.
disallow=all            ;This prevents wanton codecs from entering our environment
disallow=h263           ;Some providers send h263 as a priority codec, we can't allow this codec to enter our environment.
allow=ulaw              ;This is our preferred AUDIO codec
allow=h264              ;This is our preferred VIDEO codec
force_rport=yes         ;Forces the use of Reflexive Ports
direct_media=no         ;Disable direct media. REALLY disable it.
rtp_symmetric=yes       ;Send RTP traffic back on the same port it received it
ice_support=yes         ;Allows STUN/ICE network tools to be used, mandatory.
;dtmf_mode=rfc4733      ;DTMF declaration presumed to be needed though it interferes with provider SIP negotiations
trust_id_inbound=yes    ;Trust information being sent
rewrite_contact=yes     ;Allow re-invites
media_use_received_transport=yes        ;Send information on the same transport method received
media_address=<public_ip>    ;external media addressed used in the SIP headers
rtcp_mux=no     ;Providers are not yet using RTP MUXing.
;preferred_codec_only=yes       ;Enable only if a single codec negotiation needs to be facilitated
disable_direct_media_on_nat=yes         ;NAT environments typically can't facilitate direct media
direct_media_glare_mitigation=outgoing          ;Prevent unnescessary and chatty sip conversations
rtp_keepalive=120                ;send a keepalive to prevent disconnects due to 'silent line' detection.
100rel=yes
send_pai=yes                    ; cjm-jan18 -- sends P-Asserted-Identity header
from_domain=<hostname>              ; cjm-jan18 -- modifies the From-URI to use this domain name
user_eq_phone=yes               ; cjm-jan18 -- adds "user=phone" tag to heades in SDP

;This is the ZVRS endpoint profile that allows inbound calls from the ZVRS network
[ProviderZVRS](endpoint-zvrs) ;[name] denotes the name of this endpoint and (endpoint-providers) denotes the endpoint profile (parameters defined above) to be used.
aors=ProviderZVRS	;Which AORS profile to use, this must point to a profile of type=aor

[ProviderZVRS]	;This is the AORS profile to be used for the endpoint with the name [ZVRS]
type=aor
contact=sip:sbc.prod.champvrs.com	;Providers broadcasted hostname

[ProviderZVRS] ;This defines the source IP addresses to be used for the endpoint
type=identify  ; Must be of type identify (default: "")
endpoint=ProviderZVRS      ; Name of Endpoint (default: "")
match=208.95.32.104     ; ZVRS IP addresses or networks to match against (default: "")
match=208.94.16.104
match=74.119.12.104
match=74.119.14.104
match=208.95.32.21


[ProviderZVRS2](endpoint-zvrs)	;[name] denotes the name of this endpoint and (endpoint-providers) denotes the endpoint profile (parameters defined above) to be used.
aors=ProviderZVRS2

[ProviderZVRS2]
type=aor
contact=sip:sbc.prod.champvrs.com:15060	;Providers broadcasted hostname

[ProviderZVRS2] ;Identifies endpoints via source IP address
type=identify  ; Must be of type identify (default: "")
endpoint=ProviderZVRS2      ; Name of Endpoint (default: "")
match=208.95.32.104     ; ZVRS IP addresses or networks to match against (default: "")
match=208.94.16.104
match=74.119.12.104
match=74.119.14.104
match=208.95.32.21


[ProviderZVRS3](endpoint-zvrs)	;[name] denotes the name of this endpoint and (endpoint-providers) denotes the endpoint profile (parameters defined above) to be used.
aors=ProviderZVRS3	;Which AORS profile to use, this must point to a profile of type=aor

[ProviderZVRS3]
type=aor
contact=sip:sbc.st.bestvrs.com:15060 ;Provider hostnam to match

[ProviderZVRS3] ;Identifies endpoints via source IP address
type=identify  ; Must be of type identify (default: "")
endpoint=ProviderZVRS3      ; Name of Endpoint (default: "")
match=24.73.117.26  ;IP Address to match
match=24.73.117.210 ;IP Address to match


;This is the Sorenson profile that allows inbound calls from the Sorenson network
[ProviderSorenson](endpoint-sorenson)	;[name] denotes the name of this endpoint and (endpoint-providers) denotes the endpoint profile (parameters defined above) to be used.
aors=ProviderSorenson ;Which AORS profile to use, this must point to a profile of type=aor

[ProviderSorenson]
type=aor
contact=sip:p.ci.svrs.net	;Providers broadcasted hostname

[ProviderSorenson] ;Identifies endpoints via source IP address
type=identify  ; Must be of type identify (default: "")
endpoint=ProviderSorenson      ; Name of Endpoint (default: "")
match=209.169.230.22	;IP Addresses to match
match=209.169.230.25
match=209.169.230.32
match=209.169.230.35
match=209.169.230.42
match=209.169.230.45
match=209.169.230.52
match=209.169.230.55
match=209.169.230.62
match=209.169.230.63
match=209.169.230.72
match=209.169.230.73
match=209.169.233.22
match=209.169.233.25
match=209.169.233.32
match=209.169.233.35
match=209.169.233.42
match=209.169.233.45
match=209.169.233.52
match=209.169.233.55
match=209.169.236.22
match=209.169.236.23
match=209.169.236.25
match=209.169.236.32
match=209.169.236.35
match=209.169.236.42
match=209.169.236.43
match=209.169.236.45
match=209.169.236.52
match=209.169.236.55
match=209.169.233.62
match=209.169.233.63
match=209.169.233.72
match=209.169.233.73
match=209.169.230.83
match=209.169.230.86
match=209.169.230.87
match=209.169.230.88
match=209.169.230.92
match=209.169.233.83
match=209.169.233.86
match=209.169.233.87
match=209.169.233.88
match=209.169.233.92
match=209.169.236.83
match=209.169.236.92
match=209.169.233.103


[ProviderSorensonQA](endpoint-sorenson) ;[name] denotes the name of this endpoint and (endpoint-providers) denotes the endpoint profile (parameters defined above) to be used.
aors=ProviderSorensonQA ;Which AORS profile to use, this must point to a profile of type=aor

[ProviderSorensonQA]
type=aor
;contact=sip:209.169.226.52
contact=sip:p.ci-qa-a.svrs.net
contact=sip:p2.ci-qa-a.svrs.net

[ProviderSorensonQA] ;Identifies endpoints via source IP address
type=identify  ; Must be of type identify (default: "")
endpoint=ProviderSorensonQA      ; Name of Endpoint (default: "")
;match=209.169.226.52  ; Sorenson1 IP addresses or networks to match against (default: "")
match=209.169.226.0/255.255.0.0

[ProviderSorenson1](endpoint-sorenson)	;[name] denotes the name of this endpoint and (endpoint-providers) denotes the endpoint profile (parameters defined above) to be used.
aors=ProviderSorenson1	;Which AORS profile to use, this must point to a profile of type=aor

[ProviderSorenson1]
type=aor
contact=sip:209.169.226.52

[ProviderSorenson1] ;Identifies endpoints via source IP address
type=identify  ; Must be of type identify (default: "")
endpoint=ProviderSorenson1      ; Name of Endpoint (default: "")
match=209.169.226.52  ; Sorenson1 IP addresses or networks to match against (default: "")


[ProviderSorenson2](endpoint-sorenson)	;[name] denotes the name of this endpoint and (endpoint-providers) denotes the endpoint profile (parameters defined above) to be used.
aors=ProviderSorenson2	;Which AORS profile to use, this must point to a profile of type=aor

[ProviderSorenson2]
type=aor
contact=sip:209.169.226.162

[ProviderSorenson2] ;Identifies endpoints via source IP address
type=identify  ; Must be of type identify (default: "")
endpoint=ProviderSorenson2      ; Name of Endpoint (default: "")
match=209.169.226.162   ; Sorenson2 IP addresses or networks to match against


;These are the Purple profiles which allow inbound calls from the Purple network.
[ProviderPurple](endpoint-purple)	;[name] denotes the name of this endpoint and (endpoint-providers) denotes the endpoint profile (parameters defined above) to be used.
aors=ProviderPurple	;Which AORS profile to use, this must point to a profile of type=aor

[ProviderPurple]
type=aor
contact=sip:vrs-bgw.prod.purple.us:5060	;Providers broadcasted hostname

[ProviderPurple] ;Identifies endpoints via source IP address
type=identify  ; Must be of type identify (default: "")
endpoint=ProviderPurple
match=174.137.37.40
match=174.137.37.58
match=162.253.29.25
match=162.253.29.26
match=162.253.31.29
match=162.253.31.27
match=162.253.31.68
match=162.253.31.66


[Purple2](endpoint-providers)	;[name] denotes the name of this endpoint and (endpoint-providers) denotes the endpoint profile (parameters defined above) to be used.
aors=PurpleTest	;Which AORS profile to use, this must point to a profile of type=aor

[Purple2]
type=aor
contact=sip:vrs-bgw.test.purple.us:5060	;Providers broadcasted hostname

[Purple2] ;Identifies endpoints via source IP address
type=identify  ; Must be of type identify (default: "")
endpoint=PurpleTest
match=162.253.29.25 	;IP address to match

;These are the Convo provider profiles which allow inbound calls from the Convo network
[ProviderConvo](endpoint-convo)	;[name] denotes the name of this endpoint and (endpoint-providers) denotes the endpoint profile (parameters defined above) to be used.
aors=ProviderConvo	;Which AORS profile to use, this must point to a profile of type=aor

[ProviderConvo]
type=aor
contact=sip:sbc.sip.convorelay.net	;Providers broadcasted hostname

[ProviderConvo] ;Identifies endpoints via source IP address
type=identify  ; Must be of type identify (default: "")
endpoint=ProviderConvo     ; Name of Endpoint (default: "")
match=8.34.145.6
match=8.39.223.8
match=8.39.223.12
match=66.220.26.222


;This profile can be used to test configurations for WebRTC endpoints without modifying the current active profile
[webrtc-test](!)
type=endpoint             ;This declares the explicit type of contact that will use this profile
transport=transport-wss   ;This transport is declared to assure web secure sockets are used.
context=from-internal
disallow=all            ;This prevents wanton codecs from entering our environment
disallow=h263           ;Some providers send h263 as a priority codec, we can't allow this codec to enter our environment.
allow=ulaw              ;This is our preferred AUDIO codec
allow=vp8               ;This is our preferred VIDEO codec
allow=h264              ;This is our Secondary VIDEO codec (provider hard phones use h264)
allow=t140              ;This allows Real Time Text
force_avp=yes           ;PJSIP will use the AVP, AVPF, SAVP, or SAVPF RTP profile for all media offers on outbound calls and media updates including those for DTLS-SRTP streams
use_avpf=yes            ;PJSIP will use the AVPF or SAVPF RTP profile for all media offers on outbound calls and media updates will decline media offers not using the AVPF or SAVPF profile
media_encryption=dtls    ;PJSIP will offer DTLS-SRTP, required for SIP WebRTC endpoints
dtls_verify=fingerprint ;Verify that the provided peer certificate is valid
dtls_fingerprint=SHA-1  ;This is the encryption method
dtmf_mode=auto          ;Automatically select the DTMF mode to communicate with
dtls_rekey=0            ;Interval at which to renegotiate the TLS session and rekey
dtls_cert_file=/etc/asterisk/keys/asterisk.pem
dtls_ca_file=/etc/asterisk/keys/ca.crt
dtls_setup=actpass
ice_support=yes         ;This enables required STUN/ICE NAT tools for network traversal
media_use_received_transport=yes        ;Communicate back on the same transport method that was received
rtp_symmetric=yes       ;Send RTP traffic back on the same port it received it
force_rport=yes         ;Forces the use of Reflexive Ports
rewrite_contact=yes     ;Allow re-invites
message_context=internal-im     ;Extensions context to allow for SIP text messaging between endpoints
rtcp_mux=yes            ;RTCP muxing is currently being used in Chrome and WebRTC
trust_id_inbound=yes    ;Trust information being sent
bind_rtp_to_media_address=<public_ip>        ;Use this address to facilitate outbound RTP traffic
rtp_keepalive=5         ;send a keepalive to prevent disconnects due to 'silent line' detection.
;qualify=yes            ;Preiodically attempts to communicate with an endpoint to validate its status

;////////////////////
;/// Auths /////////
;//////////////////
[auth-provider](!)
type=auth
auth_type=

[auth-userpass](!)
type=auth
auth_type=userpass

;//////////////////
;/// AORs ////////
;////////////////
[aor-single-reg](!)
type=aor
remove_existing=yes
max_contacts=1		;maximum allowed contacts to be registered to an endpoint
;qualify_frequency=10	;Frequency by which to validate connected endpoint
minimum_expiration=60	;Minimum time for a contact to expire
default_expiration=120   ;default time for a contact to expire
;maximum_expiration=60	;Maximum allowed time for a contact to expire

[aor-tcp-reg](!)
type=aor
remove_existing=yes	;Removes existing contacts when a new contact is established
max_contacts=5          ;Maximum allowed contacts


;/////////////////////////////
;//////// Extensions ////////
;///////////////////////////

;Agent 1
[30001](endpoint-webrtc)
auth=auth30001
aors=30001

[auth30001](auth-userpass)
password=1qaz1qaz
username=30001

[30001](aor-single-reg)



;Agent 2
[30002](endpoint-webrtc)
auth=auth30002
aors=30002


[auth30002](auth-userpass)
password=1qaz1qaz
username=30002

[30002](aor-single-reg)



;Agent 3
[30003](endpoint-webrtc)
auth=auth30003
aors=30003

[auth30003](auth-userpass)
password=1qaz1qaz
username=30003

[30003](aor-single-reg)



;Agent 4
[30004](endpoint-webrtc)
auth=auth30004
aors=30004

[auth30004](auth-userpass)
password=1qaz1qaz
username=30004

[30004](aor-single-reg)



;Agent 5
[30005](endpoint-webrtc)
auth=auth30005
aors=30005

[auth30005](auth-userpass)
password=1qaz1qaz
username=30005

[30005](aor-single-reg)



;Agent 6
[30006](endpoint-webrtc)
auth=auth30006
aors=30006

[auth30006](auth-userpass)
password=1qaz1qaz
username=30006

[30006](aor-single-reg)



;Agent 7
[30007](endpoint-webrtc)
auth=auth30007
aors=30007

[auth30007](auth-userpass)
password=1qaz1qaz
username=30007

[30007](aor-single-reg)



;Agent 8
[30008](endpoint-webrtc)
auth=auth30008
aors=30008

[auth30008](auth-userpass)
password=1qaz1qaz
username=30008

[30008](aor-single-reg)



;Agent 9
[30009](endpoint-webrtc)
auth=auth30009
aors=30009

[auth30009](auth-userpass)
password=1qaz1qaz
username=30009

[30009](aor-single-reg)



;Agent 10
[30010](endpoint-webrtc)
auth=auth30010
aors=30010

[auth30010](auth-userpass)
password=1qaz1qaz
username=30010

[30010](aor-single-reg)

;///////////End of 3xxxx Agent Softphone Extensions

;//////////Begin 3xxxx Agent Softphone TEST
;Agent SIP Softphones
[40009](endpoint-sipphone)
auth=auth40009
aors=40009

[auth40009](auth-userpass)
password=1qaz1qaz
username=40009

[40009](aor-tcp-reg)



[40010](endpoint-sipphone)
auth=auth40010
aors=40010

[auth40010](auth-userpass)
password=1qaz1qaz
username=40010

[40010](aor-tcp-reg)

;//////////End 3xxxx Agent Softphone TEST
;Auto-Answer Agent
[80001](endpoint-webrtc)
auth=auth80001
aors=80001

[auth80001](auth-userpass)
password=1qaz1qaz
username=80001

[80001](aor-single-reg)


[80002](endpoint-webrtc)
auth=auth80002
aors=80002

[auth80002](auth-userpass)
password=1qaz1qaz
username=80002

[80002](aor-single-reg)


[80003](endpoint-webrtc)
auth=auth80003
aors=80003

[auth80003](auth-userpass)
password=1qaz1qaz
username=80003

[80003](aor-single-reg)


[80004](endpoint-webrtc)
auth=auth80004
aors=80004

[auth80004](auth-userpass)
password=1qaz1qaz
username=80004

[80004](aor-single-reg)


[80005](endpoint-webrtc)
auth=auth80005
aors=80005

[auth80005](auth-userpass)
password=1qaz1qaz
username=80005

[80005](aor-single-reg)

;///////////Begin 9xxxx WebRTC Extensions

;===============EXTENSION 90001

[90001](endpoint-webrtc)
auth=auth90001
aors=90001


[auth90001](auth-userpass)
password=1qaz1qaz
username=90001

[90001](aor-single-reg)


;================EXTENSION 90002
[90002](endpoint-webrtc)
auth=auth90002
aors=90002

[auth90002](auth-userpass)
password=1qaz1qaz
username=90002

[90002](aor-single-reg)


;================EXTENSION 90003
[90003](endpoint-webrtc)
auth=auth90003
aors=90003

[auth90003](auth-userpass)
password=1qaz1qaz
username=90003

[90003](aor-single-reg)


;================EXTENSION 90004
[90004](endpoint-webrtc)
auth=auth90004
aors=90004

[auth90004](auth-userpass)
password=1qaz1qaz
username=90004

[90004](aor-single-reg)


;================EXTENSION 90005
[90005](endpoint-webrtc)
auth=auth90005
aors=90005

[auth90005](auth-userpass)
password=1qaz1qaz
username=90005

[90005](aor-single-reg)


;================EXTENSION 90006
[90006](endpoint-webrtc)
auth=auth90006
aors=90006

[auth90006](auth-userpass)
password=1qaz1qaz
username=90006

[90006](aor-single-reg)


;================EXTENSION 90007
[90007](endpoint-webrtc)
auth=auth90007
aors=90007

[auth90007](auth-userpass)
password=1qaz1qaz
username=90007

[90007](aor-single-reg)


;================EXTENSION 90008
[90008](endpoint-webrtc)
auth=auth90008
aors=90008

[auth90008](auth-userpass)
password=1qaz1qaz
username=90008

[90008](aor-single-reg)


;================EXTENSION 90009
[90009](endpoint-webrtc)
auth=auth90009
aors=90009

[auth90009](auth-userpass)
password=1qaz1qaz
username=90009

[90009](aor-single-reg)


;================EXTENSION 90010
[90010](endpoint-webrtc)
auth=auth90010
aors=90010

[auth90010](auth-userpass)
password=1qaz1qaz
username=90010

[90010](aor-single-reg)

;//////////// End 9xxxx WebRTC Extensions


;///////////Begin 6xxxx Consumer Softphone Extensions

;===============EXTENSION 6001

[60001](endpoint-h264)
auth=auth60001
aors=60001

[auth60001](auth-userpass)
password=1qaz1qaz
username=60001

[60001](aor-single-reg)

;===============EXTENSION 60002

[60002](endpoint-h264)
auth=auth60002
aors=60002

[auth60002](auth-userpass)
password=1qaz1qaz
username=60002

[60002](aor-single-reg)

;===============EXTENSION 60003

[60003](endpoint-h264)
auth=auth60003
aors=60003

[auth60003](auth-userpass)
password=1qaz1qaz
username=60003

[60003](aor-single-reg)

;===============EXTENSION 60004

[60004](endpoint-h264)
auth=auth60004
aors=60004

[auth60004](auth-userpass)
password=1qaz1qaz
username=60004

[60004](aor-single-reg)

;////////End 6xxxx Consumer Softphone Extensions

[70001](endpoint-vp8)
auth=auth70001
aors=70001

[auth70001](auth-userpass)
password=1qaz1qaz
username=70001

[70001](aor-single-reg)


[70002](endpoint-vp8)
auth=auth70002
aors=70002

[auth70002](auth-userpass)
password=1qaz1qaz
username=70002

[70002](aor-single-reg)

;////////////////////////////////
;///////// Twilio //////////////
;//////////////////////////////
;Twilio profile for external numbers
[twiliotrunk](!)
        type=endpoint
        transport=transport-udp
        context=from-twilio
        disallow=all
        allow=ulaw
        ;dtmf_mode=rfc2833
        ;canreinvite=no
        ;insecure=port,invite

[auth-out](!)
type=auth
auth_type=userpass

[twilio0](twiliotrunk)
aors=twilio0-aors

[twilio0-aors]
type=aor
contact=sip:vasip.pstn.twilio.com:5060
;contact=qasip.pstn.twilio.com

[twilio0-ident]
type=identify
endpoint=twilio0
match=54.172.60.0
match=54.172.60.1
match=54.172.60.2
match=54.172.60.3


;///////End Twilio////////
