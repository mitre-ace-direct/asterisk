[general]
static=yes
writeprotect=yes
clearglobalvars=no

[globals]
TRUNK=DAHDI/G2                                  ; Trunk interface
TRUNKMSD=1                                      ; MSD digits to strip (usually 1 or 0)

;//////////////////////////////////////////////////////////////////
;///////////////   ACE Direct Dial Plan    ///////////////////////
;////////////////////////////////////////////////////////////////

[from-internal]

exten => _[+].1<dialin>,1,Goto(from-providers,_<dialin>,1)
exten => _1<dialin>,1,Goto(from-providers,_<dialin>,1)
exten => _<dialin>,1,Goto(playback-dummy,start,1)

;WebRTC Route to General Questions Queue
exten => _575781,1,Answer()
  same => n,DumpChan()
  same => n,GoTo(General_Questions,start,1)
  same => n,HangUp()

;WebRTC Route to Complaints Queue
exten => _575791,1,Answer()
  same => n,DumpChan()
  same => n,GoTo(Complaints,start,1)
  same => n,HangUp()

exten => _575798,1,Answer()
	same => n,DumpChan()
	same => n,Queue(ComplaintsQueue)
	same => n,HangUp()


exten => 998877,1,Answer()
	same => n,Wait(5)
	same => n,Record(avtest%d:ulaw)
	same => n,HangUp()

exten => 998866,1,Answer()
	same => n,Playback(avtest2)
	same => n,HangUp()

;**********************************************************************
; VideoMail
;**********************************************************************
exten => 8888,1,voicemail(9999@voicemail)
exten => 9999,1,voicemailmain(9999@voicemail)

;************************************
; Extensions
;************************************

exten => _XXXXXXXXXX,1,NoOp("Caller ID: ${CALLERID(number)}")
	same => n,AGI(itrslookup.sh,${EXTEN},"simple")
        same => n,NoOp("number: ${EXTEN} has iTRS sipuri: ${sipuri}")
	;If a blank URI this is a hearing user, direct to Twilio
        same => n,GotoIf($["${sipuri}" = "" ]?from-phones,${EXTEN},1)
        ;else do a direct dial
        same => n,AGI(itrslookup.sh,${EXTEN},"full")
        same => n,NoOp("number: ${EXTEN} has SVR record uri: ${uri}")
        same => n,Dial(PJSIP/+1${EXTEN}::::tcp@${uri},5)
        same => n,DumpChan()
        same => n,HangUp()

exten => _30XXX,1,Answer()
        same => n,DumpChan()
        same => n,Dial(PJSIP/${EXTEN},30,t)
        same => n,HangUp()

exten => _40XX,1,Answer()
        same => n,DumpChan()
        same => n,Dial(PJSIP/${EXTEN},30,t)
        same => n,HangUp()

exten => _50XX,1,Answer()
        same => n,DumpChan()
        same => n,Dial(PJSIP/${EXTEN},30,t)
        same => n,HangUp()

exten => _60XXX,1,Answer()
        same => n,DumpChan()
        same => n,Dial(PJSIP/${EXTEN},30,t)
        same => n,HangUp()

exten => _70XX,1,Answer()
        same => n,DumpChan()
        same => n,Dial(PJSIP/${EXTEN},30,t)
        same => n,HangUp()

exten => _80XX,1,Answer()
        same => n,DumpChan()
        same => n,Dial(PJSIP/${EXTEN},30,t)
        same => n,HangUp()

exten => _900XX,1,Answer()
        same => n,DumpChan()
        same => n,Dial(PJSIP/${EXTEN},30,t)
        same => n,HangUp()


[from-providers]

exten => _1XXX,1,Dial(SIP/${EXTEN})
        same => n,DumpChan()
        same => n,HangUp()

exten => _<dialin>,1,Answer()
;	same => n,Playback(je_titlescreen)
 same => n,DumpChan() ;dumps all available vars for the given channel
 same => n,NoOp("Caller ID is: ${CALLERID(number)}")  ;informational
 same => n,AGI(itrslookup.sh,${EXTEN},"simple")
 same => n,NoOp("ENUM returned sipuri: ${sipuri}")  ;informational
 same => n,Goto(from-providers_caller_query,start,2)

exten => Lookup_Again,10,NoOp("*Lookup_again -Caller ID is: ${CALLERID(number)}")  ;informational
exten => Lookup_Again,n,NoOp("*Lookup_again Caller ID is: ${CALLERID(number)}")  ;informational
exten => Lookup_Again,n,Set(sipuri=${ENUMLOOKUP(${CALLERID(num)},,,,itrs.us)}) ; NO PRECEDING 1 ADDED
exten => Lookup_Again,n,NoOp("*Lookup_again ENUM returned sipuri: ${sipuri}")  ;informational
exten => Lookup_Again,n,GotoIf($["${sipuri}" = "" ]?from-providers_caller_query,start,2:from-providers_caller_query,start,2)
exten => Lookup_Again,n,Hangup()


;/////////////
;////ZVRS #
;////////////

exten => _X<dialin>,1,Goto(from-providers,_<dialin>,1)
exten => _[+].X<dialin>,1,Goto(from-providers,_<dialin>,1)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;          ********** I V R for Z NUMBERS **********
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; IVR and determination for proper Video Q
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
exten => start,1,(start)
exten => start,n,Verbose(2,${CALLERID(num)} entering the providers **VItart,1,(start)
exten => start,n,Verbose(2,${CALLERID(num)} entering the providers query for proper queue.)
exten => start,n,Goto(start,21)
exten => start,21,Background(Company1_Full_IVVR_recording0)
exten => start,n,Goto(start,25)
exten => start,25,WaitExten(20)
; HANDLE THE DTMF CODES AS AN EXTENSION
exten => 0,1,Playback(number_0-recording0)
; ECHO test for provider devices and softphones
exten => 0,n,DumpChan() ; dumps all available vars for the given channel
exten => 0,n,NoOp("Caller ID IS: ${CALLERID(number)}")  ; just for informational purposes
exten => 0,n,Playback(demo-echotest) ; Let them know what's going on
exten => 0,n,Echo                    ; Do the echo test
exten => 0,n,Playback(demo-echodone) ; Let them know it's over
; Return to the IVVR
exten => 0,n,Goto(from-providers_caller_query,start,20)

exten => 1,1,Playback(number_1-recording0)
exten => 1,n,Goto(from-providers_caller_query,start,20)

exten => 2,1,Playback(number_2-recording0)
exten => 2,n,Goto(from-providers_caller_query,start,20)

exten => 3,1,Playback(number_3-recording0)
exten => 3,n,Goto(from-providers_caller_query,start,20)

exten => 4,1,Playback(number_4-recording0)
 same => n,Wait(2)
 same => n,Goto(Provider_General_Questions, start, 1)
 same => n,Hangup()

exten => 5,1,Playback(number_5-recording0)
 same => n,Wait(2)
 same => n,Goto(Provider_Complaints, start, 1)
 same => n,Hangup()

exten => 6,1,Playback(number_6-recording0)
exten => 6,n,voicemail(9999@voicemail)

exten => 7,1,voicemail(9999@voicemail)

exten => 8,1,Playback(number_8-recording0)
exten => 8,n,Goto(from-providers_caller_query,start,20)

exten => 9,1,Playback(number_9-recording0)
exten => 9,n,Voicemail(070716@inbound)

exten => *,1,Playback(number_star-recording1)
exten => *,n,Goto(bye,1)

exten => i,1,Playback(pbx-invalid)
exten => i,n,Goto(start,20)

exten => t,1,Playback(GoodBye-recording0)
exten => t,n,Hangup()

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; IVR and determination for proper Voice Q
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

[from-providers_caller_query]
exten => start,1,(start)
exten => start,n,Verbose(2,${CALLERID(num)} entering the query from your provider for proper queue placement.)
exten => start,n,Goto(start,20)
exten => start,20,Background(je_titlescreen)
exten => start,20,Background(je_mainmenu)
;exten => start,20,Background(company1_introduction-recording0&4_GeneralQuestions-recording1&5_Complaints-recording0&9_to_Repeat_menu-recording0)
exten => start,n,Goto(start,25)
exten => start,25,WaitExten(20)

; HANDLE THE DTMF CODES AS AN EXTENSION
exten => 0,1,Playback(number_0-recording0)
exten => 0,n,Goto(from-providers_caller_query,start,20)

exten => 1,1,Playback(number_1-recording0)
exten => 1,n,Goto(from-providers_caller_query,start,20)

exten => 2,1,Playback(number_2-recording0)
exten => 2,n,Goto(from-providers_caller_query,start,20)

exten => 3,1,Playback(number_3-recording0)
exten => 3,n,Goto(from-providers_caller_query,start,20)

exten => 4,1,Playback(4)
exten => 4,n,Goto(Provider_General_Questions,start,1)

exten => 5,1,Playback(5)
exten => 5,n,Goto(Provider_Complaints,start,1)

exten => 6,1,Playback(number_6-recording0)
exten => 6,n,Goto(Provider_General_Questions,start,1)

exten => 7,1,voicemail(9999@voicemail)

exten => 8,1,Playback(number_8-recording0)
exten => 8,n,Goto(from-providers_caller_query,start,20)

exten => 9,1,Playback(number_9-recording0)
exten => 9,n,Goto(from-providers_caller_query,start,20)

exten => *,1,Playback(number_star-recording1)
exten => *,n,Goto(bye,1)

exten => i,1,Playback(pbx-invalid)
exten => i,n,Goto(start,20)

exten => t,1,Playback(GoodBye-recording0)
exten => t,n,Hangup()
; Goodbye
exten => bye,1,Playback(GoodBye-recording0)
exten => bye,n,Hangup()


;*************
; General Questions Queue
;*************
[General_Questions]
exten => start,1,Verbose(2,${CALLERID(num)} entering the general questions queue)
exten => start,n,Set(qinfo=${QUEUE_VARIABLES(General_Questions)}) ; get the QUEUE information. returns 0 f successful
exten => start,n,Set(CALLERID(num)=${CALLERID(num):0:40}) ; to cover for a bug that only allowed for 40 bytes
exten => start,n,Set(CALLERID(name)=${CALLERID(name):0:40})
exten => start,n,Set(ACTUALTO=pjsip:${CALLERID(num)})
exten => start,n,Set(ACTUALFROM=${EXTEN})
exten => start,n,Macro(sendIMmacro,"You are in the General Questions Queue. There are $[${QUEUECALLS}+1] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})

; load up the variables that will be accessed from the queue app by he macro that is passed
exten => start,n,Set(_MYARG1="You are now connected to an (video) agent who can handle your questions.  Thank you.")
exten => start,n,Set(_MYARG2=${ACTUALTO})
exten => start,n,Set(_MYARG3=${ACTUALFROM})

; execute the queue and pass the macro
exten => start,n,Queue(GeneralQuestionsQueue)

; in case no agent is registered with the Q
exten => start,n,Macro(sendIMmacro,"Sorry. No one is available to take your call. Goodbye.",${ACTUALTO},${ACTUALFROM})

;VIDEO notice -No agent available
exten => start,n,Playback(rep_not_available-recording1) ;,skip
exten => start,n,Goto(Goodbye-video,bye,1)
exten => start, n,Hangup()

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Complaints Queue
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[Complaints]  ;from portal
exten => start,1,Verbose(2,${CALLERID(num)} entering the complaints queue)
exten => start,n,Set(qinfo=${QUEUE_VARIABLES(ComplaintsQueue)}) ; get the QUEUE information. returns 0 f successful
exten => start,n,Set(CALLERID(num)=${CALLERID(num):0:40}) ; to cover for a bug that only allowed for 40 bytes
exten => start,n,Set(CALLERID(name)=${CALLERID(name):0:40})
exten => start,n,Set(ACTUALTO=pjsip:${CALLERID(num)})
exten => start,n,Set(ACTUALFROM=${EXTEN})
exten => start,n,Macro(sendIMmacro,"You are in the Complaints Queue. There are $[${QUEUECALLS}+1] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})
exten => start,n,Queue(ComplaintsQueue)


; in case no agent is registered with the Q
exten => start,n,Macro(sendIMmacro,"Sorry. No one is available to take your call. Goodbye.",${ACTUALTO},${ACTUALFROM})

;VIDEO notice -No agent available
exten => start,n,Playback(rep_not_available-recording1) ;,skip
exten => start,n,Goto(Goodbye-video,bye,1)
exten => start, n,Hangup()

[Goodbye-video]
exten => bye,1,Playback(quiet_1sec)
exten => bye,2,Playback(GoodBye-recording0)
exten => bye,3,Hangup()

[macro-sendIM_Q_macro]
exten => i,1,Set(MESSAGE(body)=${MYARG1})
exten => s,n,Macro(${MYARG1},${MYARG2},${MYARG3})

[macro-sendIMmacro]
;ARG1 -message to send
;ARG2 -SIP recipient
;ARG3 -SIP sender
exten => s,1,Set(MESSAGE(body)=${ARG1})
exten => s,n,MessageSend(${ACTUALTO},${ACTUALFROM})

[Provider_General_Questions] ;General Questions Queue from provider phones (ZVRSGeneralQuestionsQueue)
exten => start,1,Background(je_generalq)
exten => start,n,Verbose(2,${CALLERID(num)} entering the Non-VIDEO queue)
exten => start,n,Set(qinfo=${QUEUE_VARIABLES(GeneralQuestionsQueue)}) ; get the QUEUE information. returns 0 f successful
exten => start,n,Set(CALLERID(num)=${CALLERID(num):0:40}) ; to cover for a bug that only allowed for 40 bytes
exten => start,n,Set(CALLERID(name)=${CALLERID(name):0:40})
exten => start,n,Set(ACTUALTO=pjsip:${CALLERID(num)})
exten => start,n,Set(ACTUALFROM=${EXTEN})
exten => start,n,Macro(sendIMmacro,"You are in the General Questions Queue. There are $[${QUEUECALLS}+1] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})
; load up the variables that will be accessed from the queue app by he macro that is passed
exten => start,n,Set(_MYARG1="You are now connected to an agent who can handle your call.  Thank you.")
exten => start,n,Set(_MYARG2=${ACTUALTO})
exten => start,n,Set(_MYARG3=${ACTUALFROM})
; execute the queue and pass the macro
exten => start,n,Queue(GeneralQuestionsQueue)
; in case no agent is registered with the Q
exten => start,n,Macro(sendIMmacro,"Sorry. No one is available to take your call. Goodbye.",${ACTUALTO},${ACTUALFROM})
exten => start,n,Playback(vm-nobodyavail)
exten => start,n,Playback(vm-goodbye)
exten => start,n,Hangup()

[Provider_Complaints] ;Complaints Queue From Provider Phones (ZVRSComplaintsQueue)
;;;;;;;exten => start,1,Background(je_complaintsq)
exten => start,1,DumpChan()
exten => start,n,Verbose(2,${CALLERID(num)} entering the Non-VIDEO AQ_Comp queue)
exten => start,n,Set(qinfo=${QUEUE_VARIABLES(ComplaintsQueue)}) ; get the QUEUE information. returns 0 f successful
exten => start,n,Set(CALLERID(num)=${CALLERID(num):0:40}) ; to cover for a bug that only allowed for 40 bytes
exten => start,n,Set(CALLERID(name)=${CALLERID(name):0:40})
exten => start,n,Set(ACTUALTO=pjsip:${CALLERID(num)})
exten => start,n,Set(ACTUALFROM=${EXTEN})
exten => start,n,Macro(sendIMmacro,"You are in the Complaints Queue. There are $[${QUEUECALLS}+1] calls ahead of you. The average wait is about ${QUEUEHOLDTIME} minutes",${ACTUALTO},${ACTUALFROM})
; load up the variables that will be accessed from the queue app by he macro that is passed
exten => start,n,Set(_MYARG1="You are now connected to an agent who can handle your call.  Thank you.")
exten => start,n,Set(_MYARG2=${ACTUALTO})
exten => start,n,Set(_MYARG3=${ACTUALFROM})
; execute the queue and pass the macro
exten => start,n,Queue(ComplaintsQueue,t)
; in case no agent is registered with the Q
exten => start,n,Hangup()
exten => start,n,Macro(sendIMmacro,"Sorry. No one is available to take your call. Goodbye.",${ACTUALTO},${ACTUALFROM})
exten => start,n,Playback(vm-nobodyavail)
exten => start,n,Playback(vm-goodbye)
exten => start,n,Hangup()


;///////////End Asterisk informational text context/////////

;/////////PSTN Inbound/Outbound Dial Plan////////////////

[from-twilio]

exten => _+1NXXXXXXXXX,1,Answer()
        same => n,Goto(from-providers,_<dialin>,1)
        ;same => n,Playback(moh14)
        ;same => n,Queue(ComplaintsQueue)
        same => n,DumpChan()


[from-phones]
exten => _NXXNXXXXXX,1,Set(CALLERID(all)="ACE Direct" <<dialin>>)
same => n,DumpChan()
same => n,Dial(PJSIP/+1${EXTEN}@twilio0)

[playback-dummy]
exten => start,1,Playback(je_titlescreen)

[internal-im]
exten => _X.,1,NoOp(Messaging dialplan invoked)
exten => _X.,n,NoOp(To ${MESSAGE(to)})
exten => _X.,n,NoOp(From ${MESSAGE(from)})
exten => _X.,n,NoOp(Body ${MESSAGE(body)})
;exten => _.,n,AGI(chatplan.php,${MESSAGE(from)})
exten => _X.,n,Set(ACTUALTO=${CUT(MESSAGE(to),@,1)})
;exten => _.,n,ExecIf($["${ACTUALTO}" != "sip:${EXTEN}"]?Set(ACTUALTO=sip:${EXTEN}))
;exten => _.,n,MessageSend(${MESSAGE(to)},${MESSAGE(from)})

exten => _X.,n,MessageSend(${ACTUALTO},${MESSAGE(from)})
exten => _X.,n,NoOp(Send status is ${MESSAGE_SEND_STATUS})
exten => _X.,n,GotoIf($["${MESSAGE_SEND_STATUS}" != "SUCCESS"]?sendfailedmsg)
exten => _X.,n,Hangup()
;
; Handle failed messaging
exten => _X.,n(sendfailedmsg),NoOp(Sending error to user)
exten => _X.,n,Set(SRC=${MESSAGE(from)})
exten => _X.,n,Set(DST=${MESSAGE(to)})
exten => _X.,n,Set(MSG=${MESSAGE(body)})
exten => _X.,n,Set(MESSAGE(body)="[${STRFTIME(${EPOCH},,%d%m%Y-%H:%M:%S)}] Your message to ${EXTEN} has failed. Sending when available")
exten => _X.,n,Set(ME_1=${CUT(MESSAGE(from),<,2)})
exten => _X.,n,Set(ACTUALFROM=${CUT(ME_1,@,1)})
exten => _X.,n,MessageSend(${ACTUALFROM},ServiceCenter)
exten => _X.,n,GotoIf($["${INQUEUE}" != "1"]?startq)
exten => _X.,n,Hangup()
;
exten => _X.,n(startq),NoOp(Queueing messaging for offline)
exten => _X.,n,Set(MSGTIME=${STRFTIME(${EPOCH},,%d%m%Y-%H:%M:%S)})
exten => _X.,n,SYSTEM(/var/lib/asterisk/agi-bin/astqueue.sh –SRC ‘${SRC}’ –DST ‘${DST}’ –MSG ‘${MSG}’)
exten => _X.,n,Hangup()[app-fakeanswer]
;exten => _X.,1,NoCDR
exten => _X.,n,Set(DESTDEV=${EXTEN})
exten => _X.,n,Set(THISDEVSTATE=${DEVICE_STATE(SIP/${DESTDEV})})
exten => _X.,n,GotoIf($["${THISDEVSTATE}" = "UNAVAILABLE"]?hang)
exten => _X.,n,GotoIf($["${THISDEVSTATE}" = "UNKNOWN"]?hang)
exten => _X.,n,Answer
exten => _X.,n,Hangup()
exten => _X.,n(hang),Hangup()

